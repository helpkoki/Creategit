#+TITLE: How to Create Your Own Git System
#+AUTHOR: Your Name
#+DATE: 2024-11-18
#+OPTIONS: toc:t

* Introduction
This project is a learning exercise to demonstrate how to create a basic version control system similar to Git. We will build a simplified version that handles repository initialization, object storage, and basic command-line interaction. This guide provides the foundation for understanding the internals of a version control system.

* Getting Started: Implementing =git init=
The first entry point for any Git-like system is the ~git init~ command. Our goal is to implement this command to initialize a new repository.

**Core Components**:
1. The project files (work tree).
2. A hidden directory for version control metadata (we’ll use =.getdir= instead of =.git=).

**Process**:
1. Check if the =.getdir= directory exists.
   - If it exists, notify the user that the repository is already initialized.
2. If it doesn't exist:
   - Create the =.getdir= directory along with its subdirectories.
   - Set up necessary files like =HEAD=.

* Chapter Overview
This project is structured into six chapters, focusing on different aspects of the system:
1. **Project Initialization**: Setting up the repository structure.
2. **Reading Git Objects (blob)**: Implementing functionality to read data objects.
3. **Writing Git Objects (blob)**: Saving file data in version-controlled objects.
4. **Reading Git Trees**: Parsing and retrieving directory structures.
5. **Writing Git Trees**: Storing and managing directory structures.
6. **Expanding Git Objects**: Further handling and enhancements.

* Chapter 1: Project Initialization
This chapter focuses on implementing the =git init= command.

**Conceptual Overview**:
1. Check if the directory =.getdir= exists.
2. If not, create it along with necessary subdirectories and files.
3. If it already exists, notify the user that the repository is initialized.

**Cross-Platform Considerations**:
- On *Linux* and *macOS*: Use Bash or a Python environment.
- On *Windows*: Use the Windows Subsystem for Linux (WSL) or Python directly.

**Implementation Plan**:
1. Create a script called =mygit.py=.
2. Check if the =.getdir= directory exists:
   - If it doesn’t exist, create the directory and files.
   - If it does, print a message like "Repository already initialized."
3. Add command-line support to make the script executable.

**Testing**:
- Verify that running the script creates a =.getdir= directory with the correct structure.

**Example Code: Repository Initialization**
#+BEGIN_SRC python
import os

class GitInit:
    def __init__(self, path):
        self.worktree = path
        self.getdir = os.path.join(path, '.getdir')
        self.initialize_repo()

    def initialize_repo(self):
        if os.path.exists(self.getdir):
            print("Git directory already exists. Reinitialization not needed.")
        else:
            self.create_repo()

    def create_repo(self):
        try:
            # Create the .getdir directory and its subdirectories
            os.makedirs(os.path.join(self.getdir, "objects"))
            os.makedirs(os.path.join(self.getdir, "refs"))

            # Create the HEAD file with a reference to the main branch
            head_path = os.path.join(self.getdir, "HEAD")
            with open(head_path, "w") as f:
                f.write("ref: refs/heads/main\n")

            print(f"Initialized empty Git repository in {self.getdir}")

        except Exception as e:
            print(f"Error during repository initialization: {e}")

# Initialize the repository in the current working directory
#+END_SRC

**Integrating Command-Line Support**
Create a wrapper script to handle command-line interactions.

#+BEGIN_SRC python
import os
import sys
from gitInit import GitInit  # Ensure gitInit.py is in the same directory or Python path

def main(argv=sys.argv[1:]):
    try:
        GitInit(os.getcwd())
    except Exception as e:
        print(f"Error: {e}")
#+END_SRC

* Making It Usable from the Command Line
Follow these steps to enable command-line functionality:

**Step 1: Create a Bash Wrapper (Linux/macOS)**
Create a script named =vcs=:
#+BEGIN_SRC bash
#!/usr/bin/env python3
import start
start.main()
#+END_SRC

**Step 2: Make the Script Executable**
Run the following command:
#+BEGIN_SRC sh
chmod +x vcs
#+END_SRC

**Step 3: Add to Your PATH**
Add the script to your PATH for easy access:
#+BEGIN_SRC sh
export PATH=$PATH:/path/to/your/script
#+END_SRC

**Step 4: Test the Command**
Run the following to initialize a repository:
#+BEGIN_SRC sh
vcs
#+END_SRC

* Conclusion
Congratulations! You’ve built the foundation for a version control system. This simple implementation introduces you to key Git concepts. Next steps could include:
- Staging files.
- Committing changes.
- Viewing logs.
- Implementing branching and merging.

Happy coding!
